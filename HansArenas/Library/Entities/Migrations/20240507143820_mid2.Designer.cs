// <auto-generated />
using System;
using Entities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(Library_DbContext))]
    [Migration("20240507143820_mid2")]
    partial class mid2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<int>("Categories_InTheBookCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("LibriInCategoriaBookId")
                        .HasColumnType("int");

                    b.HasKey("Categories_InTheBookCategoryId", "LibriInCategoriaBookId");

                    b.HasIndex("LibriInCategoriaBookId");

                    b.ToTable("BookCategory");
                });

            modelBuilder.Entity("Entities.Model.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<DateOnly>("Author_DateOfBirthhday")
                        .HasColumnType("date");

                    b.Property<string>("Author_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Author_Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Entities.Model.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("Author_Id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfPublication")
                        .HasColumnType("date");

                    b.Property<int>("NumberOfCopiesLeft")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTotalCopies")
                        .HasColumnType("int");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int?>("Publisher_Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Entities.Model.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<int>("Book_BookedBookId")
                        .HasColumnType("int");

                    b.Property<int?>("Book_Id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Booking_Date")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Return_Date")
                        .HasColumnType("date");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingId");

                    b.HasIndex("Book_BookedBookId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Entities.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entities.Model.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("Publisher_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("Entities.Model.Category", null)
                        .WithMany()
                        .HasForeignKey("Categories_InTheBookCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Model.Book", null)
                        .WithMany()
                        .HasForeignKey("LibriInCategoriaBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Model.Book", b =>
                {
                    b.HasOne("Entities.Model.Author", "Author")
                        .WithMany("Author_WrittenBooks")
                        .HasForeignKey("AuthorId");

                    b.HasOne("Entities.Model.Publisher", "Publisher")
                        .WithMany("Publisher_Books")
                        .HasForeignKey("PublisherId");

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Entities.Model.Booking", b =>
                {
                    b.HasOne("Entities.Model.Book", "Book_Booked")
                        .WithMany("Bookings")
                        .HasForeignKey("Book_BookedBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book_Booked");
                });

            modelBuilder.Entity("Entities.Model.Author", b =>
                {
                    b.Navigation("Author_WrittenBooks");
                });

            modelBuilder.Entity("Entities.Model.Book", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Entities.Model.Publisher", b =>
                {
                    b.Navigation("Publisher_Books");
                });
#pragma warning restore 612, 618
        }
    }
}
