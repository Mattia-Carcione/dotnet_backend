// <auto-generated />
using System;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20240903164547_OrderTable")]
    partial class OrderTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BookCategory");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            CategoriesId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            CategoriesId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            CategoriesId = 3
                        },
                        new
                        {
                            BooksId = 4,
                            CategoriesId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            CategoriesId = 5
                        });
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1775, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Austen",
                            Name = "Jane"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1835, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Twain",
                            Name = "Mark"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1812, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Dickens",
                            Name = "Charles"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1797, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Shelley",
                            Name = "Mary"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1903, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Orwell",
                            Name = "George"
                        });
                });

            modelBuilder.Entity("Models.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("Copies")
                        .HasColumnType("int");

                    b.Property<int>("EditorId")
                        .HasColumnType("int");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalCopies")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EditorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Copies = 5,
                            EditorId = 1,
                            Pages = 432,
                            PublicationDate = new DateTime(1813, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Pride and Prejudice",
                            TotalCopies = 10
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Copies = 7,
                            EditorId = 2,
                            Pages = 366,
                            PublicationDate = new DateTime(1884, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Adventures of Huckleberry Finn",
                            TotalCopies = 15
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Copies = 8,
                            EditorId = 3,
                            Pages = 544,
                            PublicationDate = new DateTime(1861, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Great Expectations",
                            TotalCopies = 12
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            Copies = 3,
                            EditorId = 4,
                            Pages = 280,
                            PublicationDate = new DateTime(1818, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Frankenstein",
                            TotalCopies = 8
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            Copies = 10,
                            EditorId = 5,
                            Pages = 328,
                            PublicationDate = new DateTime(1949, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "1984",
                            TotalCopies = 20
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 1,
                            Copies = 0,
                            EditorId = 1,
                            Pages = 328,
                            PublicationDate = new DateTime(1815, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Emma",
                            TotalCopies = 20
                        });
                });

            modelBuilder.Entity("Models.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            BookingDate = new DateTime(2024, 8, 29, 18, 45, 47, 540, DateTimeKind.Local).AddTicks(9917),
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            BookingDate = new DateTime(2024, 8, 24, 18, 45, 47, 540, DateTimeKind.Local).AddTicks(9924),
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            BookingDate = new DateTime(2024, 8, 19, 18, 45, 47, 540, DateTimeKind.Local).AddTicks(9928),
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            BookingDate = new DateTime(2024, 8, 27, 18, 45, 47, 540, DateTimeKind.Local).AddTicks(9930),
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            BookingDate = new DateTime(2024, 8, 14, 18, 45, 47, 540, DateTimeKind.Local).AddTicks(9934),
                            ReturnDate = new DateTime(2024, 8, 24, 18, 45, 47, 540, DateTimeKind.Local).AddTicks(9935),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Fictional books",
                            Genre = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sci-Fi books",
                            Genre = "Science Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Mystery and detective stories",
                            Genre = "Mystery"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Biographical works",
                            Genre = "Biography"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Horror and thriller books",
                            Genre = "Horror"
                        });
                });

            modelBuilder.Entity("Models.Entities.Editor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Editors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Penguin Books"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HarperCollins"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Random House"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Macmillan Publishers"
                        });
                });

            modelBuilder.Entity("Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedDate = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedDate = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "AliceSmith@email.com",
                            IsPremium = true,
                            Username = "alice"
                        },
                        new
                        {
                            Id = 2,
                            Email = "BobSmith@email.com",
                            IsPremium = false,
                            Username = "bob"
                        });
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("Models.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Book", b =>
                {
                    b.HasOne("Models.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Editor", "Editor")
                        .WithMany("Books")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("Models.Entities.Booking", b =>
                {
                    b.HasOne("Models.Entities.Book", "Book")
                        .WithMany("Bookings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Order", b =>
                {
                    b.HasOne("Models.Entities.Book", "Book")
                        .WithMany("Orders")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Models.Entities.Book", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Models.Entities.Editor", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
